/*
    Rule:  aci_PerformRehire
    Author:  Steve Nuffer
	
    Date:  December 7, 2016	
	Version: 1.2

    if (Notify Y --> N) and ( (EMP_START_DATE > CurrentDate) OR (CURRENT_EMPLOYEE_FLAG N --> Y) )
    Send Rehire
    
*/
import org.apache.log4j.Logger; 
import sailpoint.object.*;
import sailpoint.tools.Util;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

Logger logger = Logger.getLogger("com.aci.rule.aci_PerformRehire");
logger.debug("aci_PerformRehire");

// The instanceof operator returns false if the object is null or void
// as well as if it is a different object type.
if (!(previousIdentity instanceof Identity)) {
    // New Hire or Error on newIdentity
    logger.debug("    Previous Identity Null ");
    return false;
}

if ( !(newIdentity instanceof Identity)) {
    // New Hire or Error on newIdentity
    logger.debug("    New Identity Null");
    return false;
}

// Identity is not from an authoritative source
if ( ! newIdentity.isCorrelated() ) {
    logger.debug("    Not authoritative identity");
    return false;
}

// Get Identity Information
boolean performLCM = false;
Date currentDate = new Date();
DateFormat dateFMTMMddyyyy = new SimpleDateFormat("MM-dd-yyyy");
String identityStartDate = newIdentity.getAttribute("EMP_START_DATE");
Date startDate = dateFMTMMddyyyy.parse(identityStartDate);
boolean oldActive = !previousIdentity.isInactive();
boolean newActive = !newIdentity.isInactive();
String oldTermNotify = previousIdentity.getAttribute("termNotification");
String newTermNotify = newIdentity.getAttribute("termNotification");
String identitytName  = newIdentity.getDisplayName();

logger.debug(identitytName);

// Rehire ((EMP_START_DATE > CurrentDate) OR (CURRENT_EMPLOYEE_FLAG N --> Y))
logger.debug("identityStartDate=" + identityStartDate);
logger.debug("startDate=" + startDate);
logger.debug("CurrentDate=" + currentDate);
logger.debug("oldActive=" + oldActive);
logger.debug("newActive=" + newActive);
logger.debug("oldTermNotify=" + oldTermNotify);
logger.debug("newTermNotify=" + newTermNotify);

// Notification Flag Correct
if ( !("Y".equalsIgnoreCase(oldTermNotify) && "N".equalsIgnoreCase(newTermNotify)) ) {
    // Hire or Rehire
    logger.debug("    Notification incorrect");
    return false;
}

// Start Date in the future or was in the past
if ( !currentDate.after(startDate) || (!oldActive && newActive) ) {
    // Rehire or Retro Rehire
    performLCM=true;
}

logger.debug ("    performLCM=" + performLCM);
return performLCM;