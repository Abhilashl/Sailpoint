<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Workflow PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Workflow created="1470852244753" explicitTransitions="true" id="8a8596e4561847be015675a025111e68" libraries="Identity" modified="1479478068142" name="ACI - Fusion Leaver" type="IdentityLifecycle">
  <Variable input="true" name="plan">
    <Description>The provisioning plan ready to execute.</Description>
  </Variable>
  <Variable input="true" name="flow">
    <Description>The name of the LCM flow that launched this workflow.

      This is one of these three values:
 
      AccountsRequest
      EntitlementsRequest
      RolesRequest</Description>
  </Variable>
  <Variable editable="true" initializer="string:false" name="optimisticProvisioning">
    <Description>Set to true to enable optimistic provisioning.  This will cause
      changes to the entitlements compiled from role assignments to be 
      applied immediately to the identity cube rather than waiting
      for the next refresh/reaggregation after the provisioning system
      completes the request.</Description>
  </Variable>
  <Variable editable="true" initializer="string:true" name="foregroundProvisioning">
    <Description>Normally provisioning is done in a step that uses the "background"
      option to force the workflow to be suspend and be resumed in a
      background task thread.  This prevents the browser session from
      hanging since provision can sometimes take a long time.  For demos
      and testing it can be better to do this in the foreground so that
      provisioning will have been performed when control is returned to the
      user.  This prevents having to run the Perform Maintenance task to 
      see the resutls of the request.</Description>
  </Variable>
  <Variable initializer="string:Normal" input="true" name="workItemPriority">
    <Description>The String version of a WorkItem.Priority. This variable is 
       used to set the priority on all of the workitems generated 
       as part of this workflow and also set on the IdentityRequest
       object.</Description>
  </Variable>
  <Variable initializer="string:spadmin" input="true" name="fallbackApprover">
    <Description>A String that specifies the name of the Identity that will 
      be assigned any approvals where the owner of the approver 
      can't be resolved. Example if the scheme is "owner" and the 
      application doesn't specify and owner.</Description>
  </Variable>
  <Variable initializer="string:false" input="true" name="enableRetryRequest">
    <Description>When set to true it will disable the workflow retry loop and let the 
      Provision step launch requests to handle the retries.  Enabling
      this flag will enable some older functionality.</Description>
  </Variable>
  <Variable initializer="string:LCM" input="true" name="source">
    <Description>String version of sailpoint.object.Source to indicate
      where the request originated.  Defaults to LCM.</Description>
  </Variable>
  <Variable initializer="string:true" name="trace"/>
  <Variable name="approvalSet">
    <Description>This attributes is set during the "Build Approval Set" step,
       which builds this list by going through the ProvisioningPlan
       to build the line items that need to be approved,

       This variable includes all ApprovalItems that are part of 
       the request process and is updated during the AfterScript
       of the approval process by assimilating the decisions 
       and comments from the Approvals copy of the ApprovalItem.</Description>
  </Variable>
  <Variable input="true" name="project"/>
  <Variable name="identityRequestId" output="true">
    <Description>The sequence id of the Identity request object which is stored in 
       the name field of the identity request and auto-incremented.</Description>
  </Variable>
  <Variable name="workItemComments">
    <Description>Global comments accumulated during the workflow which should be shared
      with other approvals. When a new approval is created, the comments in this
      list will be added to the work item.</Description>
  </Variable>
  <Variable input="true" name="managerElectronicSignature">
    <Description>The name of the electronic signature object that should be used when workitems 
       are completed by a manager.</Description>
  </Variable>
  <Variable input="true" name="ownerElectronicSignature">
    <Description>The name of the electronic signature object that should be used when workitems 
       are completed by object owners.</Description>
  </Variable>
  <Variable input="true" name="securityOfficerElectronicSignature">
    <Description>The name of the electronic signature object that should be used when workitems 
       are completed by the security officer.</Description>
  </Variable>
  <Variable input="true" name="trigger">
    <Description>The IdentityTrigger</Description>
  </Variable>
  <Variable name="identityModel">
    <Description>The identity model that is used to represent the identity being created.</Description>
  </Variable>
  <Variable input="true" name="event">
    <Description>The IdentityChangeEvent</Description>
  </Variable>
  <Variable input="true" name="identityName">
    <Description>The name of the identity.</Description>
  </Variable>
  <Variable input="true" name="userName">
    <Description>The display name of the identity.</Description>
  </Variable>
  <Variable input="true" name="accountDeprovisionScenario"/>
  <Variable input="true" name="daysToWaitForDeletion">
    <Description>The native Identity</Description>
  </Variable>
  <Variable input="true" name="nativeIdentity">
    <Description>The native Identity</Description>
  </Variable>
  <Variable input="true" name="applicationName">
    <Description>The native Identity</Description>
  </Variable>
  <Variable input="true" name="accountDeprovisioningModelRule">
    <Description>Account DeprovisioningModel Rule</Description>
  </Variable>
  <Variable input="true" name="accountDeprovisioningPlanRule"/>
  <Variable input="true" name="accountDeprovisioningPostProvRule"/>
  <Variable input="true" name="plan">
    <Description>The provisioning plan ready to execute.</Description>
  </Variable>
  <Variable input="true" name="flow">
    <Description>The name of the LCM flow that launched this workflow.

      This is one of these three values:
 
      AccountsRequest
      EntitlementsRequest
      RolesRequest</Description>
  </Variable>
  <Variable editable="true" initializer="false" name="optimisticProvisioning">
    <Description>Set to true to enable optimistic provisioning.  This will cause
      changes to the entitlements compiled from role assignments to be 
      applied immediately to the identity cube rather than waiting
      for the next refresh/reaggregation after the provisioning system
      completes the request.</Description>
  </Variable>
  <Variable editable="true" initializer="true" name="foregroundProvisioning">
    <Description>Normally provisioning is done in a step that uses the "background"
      option to force the workflow to be suspend and be resumed in a
      background task thread.  This prevents the browser session from
      hanging since provision can sometimes take a long time.  For demos
      and testing it can be better to do this in the foreground so that
      provisioning will have been performed when control is returned to the
      user.  This prevents having to run the Perform Maintenance task to 
      see the resutls of the request.</Description>
  </Variable>
  <Variable initializer="Normal" input="true" name="workItemPriority">
    <Description>The String version of a WorkItem.Priority. This variable is 
       used to set the priority on all of the workitems generated 
       as part of this workflow and also set on the IdentityRequest
       object.</Description>
  </Variable>
  <Variable initializer="spadmin" input="true" name="fallbackApprover">
    <Description>A String that specifies the name of the Identity that will 
      be assigned any approvals where the owner of the approver 
      can't be resolved. Example if the scheme is "owner" and the 
      application doesn't specify and owner.</Description>
  </Variable>
  <Variable initializer="false" input="true" name="enableRetryRequest">
    <Description>When set to true it will disable the workflow retry loop and let the 
      Provision step launch requests to handle the retries.  Enabling
      this flag will enable some older functionality.</Description>
  </Variable>
  <Variable initializer="LCM" input="true" name="source">
    <Description>String version of sailpoint.object.Source to indicate
      where the request originated.  Defaults to LCM.</Description>
  </Variable>
  <Variable initializer="true" name="trace"/>
  <Variable name="approvalSet">
    <Description>This attributes is set during the "Build Approval Set" step,
       which builds this list by going through the ProvisioningPlan
       to build the line items that need to be approved,

       This variable includes all ApprovalItems that are part of 
       the request process and is updated during the AfterScript
       of the approval process by assimilating the decisions 
       and comments from the Approvals copy of the ApprovalItem.</Description>
  </Variable>
  <Variable input="true" name="project"/>
  <Variable name="identityRequestId" output="true">
    <Description>The sequence id of the Identity request object which is stored in 
       the name field of the identity request and auto-incremented.</Description>
  </Variable>
  <Variable name="workItemComments">
    <Description>Global comments accumulated during the workflow which should be shared
      with other approvals. When a new approval is created, the comments in this
      list will be added to the work item.</Description>
  </Variable>
  <Variable input="true" name="managerElectronicSignature">
    <Description>The name of the electronic signature object that should be used when workitems 
       are completed by a manager.</Description>
  </Variable>
  <Variable input="true" name="ownerElectronicSignature">
    <Description>The name of the electronic signature object that should be used when workitems 
       are completed by object owners.</Description>
  </Variable>
  <Variable input="true" name="securityOfficerElectronicSignature">
    <Description>The name of the electronic signature object that should be used when workitems 
       are completed by the security officer.</Description>
  </Variable>
  <Variable input="true" name="trigger">
    <Description>The IdentityTrigger</Description>
  </Variable>
  <Variable name="identityModel">
    <Description>The identity model that is used to represent the identity being created.</Description>
  </Variable>
  <Variable input="true" name="event">
    <Description>The IdentityChangeEvent</Description>
  </Variable>
  <Variable input="true" name="identityName">
    <Description>The name of the identity.</Description>
  </Variable>
  <Variable input="true" name="userName">
    <Description>The display name of the identity.</Description>
  </Variable>
  <Variable input="true" name="accountDeprovisionScenario"/>
  <Variable input="true" name="daysToWaitForDeletion">
    <Description>The native Identity</Description>
  </Variable>
  <Variable input="true" name="nativeIdentity">
    <Description>The native Identity</Description>
  </Variable>
  <Variable input="true" name="applicationName">
    <Description>The native Identity</Description>
  </Variable>
  <Variable input="true" name="accountDeprovisioningModelRule">
    <Description>Account DeprovisioningModel Rule</Description>
  </Variable>
  <Variable input="true" name="accountDeprovisioningPlanRule"/>
  <Variable input="true" name="accountDeprovisioningPostProvRule"/>
  <Description>Disable all user accounts when an employee leaves the company.  Send
       email notifications to the person's Manager and to any Application Owners
       of non-authoritative Applications.  In other words, there is no reason
       to alert the HR team, since they triggered this event in the first place.</Description>
  <Step icon="Start" name="start" posX="70" posY="174" wait="1">
    <Transition to="Create Disable Account Request"/>
  </Step>
  <Step icon="Analysis" name="Create Disable Account Request" posX="205" posY="175" resultVariable="plan">
    <Script>
      <Source>/*
    Workflow:  ACI - Fusion Leaver
    Step:  Create Disable Account Request
    
    Date:  November 10, 2016
    Version:  1.22
*/

import org.apache.log4j.Logger;
import sailpoint.object.*;	  
import sailpoint.object.ProvisioningPlan;
import sailpoint.object.ProvisioningPlan.AccountRequest;
import java.util.*; 
import sailpoint.aci.util.ACIUtil;
import sailpoint.api.*;
import java.text.*;

Logger  logger = Logger.getLogger("com.aci.wf.leaver");
logger.debug("ACI - Fusion Leaver(Create Disable Account Request)");

DateFormat dateFormatter = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
now = new Date();

String sendLdapNotification = "false";

Identity identityObj = context.getObjectByName(Identity.class,identityName);

// Get the AD OU from countryCodeMap
String identityCountry = identityObj.getAttribute("country");
Custom custom = context.getObjectByName(Custom.class,"countryCodeMap");
String ou = custom.get(identityCountry);

// Setup Notification to HR        
logger.debug("\tHR Notification"); 
if ( ou.equals("EMEA") ) {
    logger.debug("\tmbox-emea-orientation@aciworldwide.com");
    workflow.put("hrEmail", "mbox-emea-orientation@aciworldwide.com");
}else if ( ou.equals("AP") ) {
  logger.debug("\tmbox-ap-ecn-hr@aciworldwide.com");
    workflow.put("hrEmail","mbox-ap-ecn-hr@aciworldwide.com");
}else {
    logger.debug("\tmbox-am-orientation@aciworldwide.com");
    workflow.put("hrEmail", "mbox-am-orientation@aciworldwide.com");
}

String termDate = "";

Identity managerObj = identityObj.getManager();

if (null != managerObj) {
    managerApprover = managerObj.getName();
    workflow.put("managerEmail", managerObj.getEmail());
    workflow.put("managerName", managerObj.getDisplayableName());
} else {
    Identity idAdmin = context.getObjectByName(Identity.class, "spadmin");
    managerApprover = "spadmin";
    workflow.put("managerName", managerApprover);
    if (null != idAdmin.getEmail()){
        workflow.put("managerEmail", idAdmin.getEmail());
    }
}

List linkLists = identityObj.getLinks();
List applist = new ArrayList();

// Create a new provision plan
if (plan==null) plan=new ProvisioningPlan();

    //For each Link
    if ( null != linkLists ) {
        for ( Link link : linkLists ) {
            HashMap map = new HashMap();
            String appName = link.getApplication().getName();
            String acctName = link.getNativeIdentity();
            String appConnectorType = link.getApplication().getConnector();
            boolean isAppAuth = link.getApplication().isAuthoritative();
              
            //  Need to move because NIS and Clarity Issues
            //AccountRequest acctReq = new AccountRequest();
            //acctReq.setNativeIdentity(acctName);
            //acctReq.setApplication(appName);
            //acctReq.setOperation(AccountRequest.Operation.Disable);
            
            //Check if the application can use an account Request
            
            // Based upon connector Type
            switch (appConnectorType) {
                //**************************************************************************
                //*****  Active Directory
                case "sailpoint.connector.ADLDAPConnector":
                    
                    String acctDistName = link.getAttribute("distinguishedName");
                    
                    AccountRequest acctReq = new AccountRequest();
                    acctReq.setNativeIdentity(acctName);
                    acctReq.setApplication(appName);
                    acctReq.setOperation(AccountRequest.Operation.Disable);
                    
                    // Set Application Attribute
                    acctReq.add(new AttributeRequest("description", ProvisioningPlan.Operation.Set, "IIQ leaver:  "+dateFormatter.format(now) ));
                    
                    //Move to Disabled OU
                    String disabledOU = "OU=Users,OU=Disabled," + acctDistName.substring(acctDistName.indexOf("DC=",0), acctDistName.length() );
                    acctReq.add(new AttributeRequest("AC_NewParent",ProvisioningPlan.Operation.Set, disabledOU)); 
                    plan.add(acctReq);
                    
                    int dcindex = acctName.indexOf("DC=");
                    String domain = acctName.substring(dcindex+3, acctName.indexOf(",", dcindex) );
                        
                    map.put("name", appName);
                    map.put("account", domain+"\\" + link.getAttribute("sAMAccountName"));
                    map.put("info", "Network ID");
                    applist.add(map);  
                    break;                 
                //**************************************************************************
                //*****  Salesforce
                case "sailpoint.connector.ForceConnector":
                
                    AccountRequest acctReq = new AccountRequest();
                    acctReq.setNativeIdentity(acctName);
                    acctReq.setApplication(appName);
                    acctReq.setOperation(AccountRequest.Operation.Disable);
                    plan.add(acctReq); 

                    map.put("name", appName);
                    map.put("account", acctName);
                    map.put("info", "Single Sign On (SSO)");
                    applist.add(map);  
                    break;                    
                //**************************************************************************
                //*****  Open Connector
                case "sailpoint.connector.OpenConnectorAdapter":
                    map.put("name", appName);
                    map.put("account", acctName);
                    
                    // Check the specific name of the Application
                    if (appName.toLowerCase().contains("clarity") ) {
                        //Clarity
                        map.put("info", "Single Sign On (SSO)");
                    } else if (appName.toLowerCase().contains("webex") ) {
                        //Webex
                        AccountRequest acctReq = new AccountRequest();
                        acctReq.setNativeIdentity(acctName);
                        acctReq.setApplication(appName);
                        acctReq.setOperation(AccountRequest.Operation.Disable);
                        plan.add(acctReq);
                        map.put("info", "Single Sign On (SSO)");
                    } else {
                        //Other (NIS)
                        map.put("info", "");
                    }
                    applist.add(map);  
                    break;                    
                //**************************************************************************
                //*****  Delimited file
                case "sailpoint.connector.DelimitedFileConnector":                  
                    // Check the specific name of the Application
                    if ( appName.toLowerCase().contains("fusion" ) ) {
                        // Fusion
                        ;
                    } else if ( appName.toLowerCase().contains("hrms" ) ) {
                        // Oracle 11i
                        ; 
                    } else {
                        // Other
                        map.put("name", appName);
                        map.put("account", acctName);
                        map.put("info", "");
                        applist.add(map);  
                    }
                    break;                                        
                //**************************************************************************
                //*****  Other
                default:
                    map.put("name", appName);
                    map.put("account", acctName);
                    map.put("info", "");    
                    applist.add(map);  
                    break;
            }
            // Is application Authoritative?
            if ( isAppAuth) {
               link.setAttribute("IIQDisabled", "true");
               
                // Get Fusion Term date if available
                if ( appName.toLowerCase().contains("fusion" ) ) {
                    termDate = link.getAttribute("ACTUAL_TERMINATION_DATE");
                }
                
               if ( Util.isEmpty(termDate) ) {
                   termDate = "Immediate";
                }
            }
            
            // Add the Application and Account to the List
            // Need to move because NIS and Clarity Issues
            //plan.add(acctReq);   
        }          
    }

logger.debug("Setting identity attributes");
logger.debug("identityObj.isInactive=" + identityObj.isInactive());
identityObj.setInactive(true);
identityObj.setPassword("");
context.saveObject(identityObj);
context.commitTransaction();

workflow.put("applist", applist);
workflow.put("plan", plan);

workflow.put("firstname", identityObj.getFirstname());
workflow.put("lastname", identityObj.getLastname());
workflow.put("employeeEmail", identityObj.email);
workflow.put("networkId", identityObj.getAttribute("networkId"));
workflow.put("employeeTitle", identityObj.getAttribute("employeeTitle"));
workflow.put("personType", identityObj.getAttribute("personType"));
workflow.put("department", identityObj.getAttribute("DEPT_NAME"));
workflow.put("location", identityObj.getAttribute("location"));
workflow.put("country", identityObj.getAttribute("country"));
workflow.put("company", identityObj.getAttribute("company"));
workflow.put("termDate", termDate);
workflow.put("sendLdapNotification", sendLdapNotification);

// IRS Certified?
String identityIRSStatus = identityObj.getAttribute("irsStatus");
String identityIRSCertDate = identityObj.getAttribute("irsCertDate");
if ( !Util.isNotNullOrEmpty(identityIRSCertDate) ) identityIRSCertDate = "None"; 

if ("IRS Certified".equalsIgnoreCase(identityIRSStatus) || "IRS Preparation".equalsIgnoreCase(identityIRSStatus) ) {
    // Notify ACI IRS - Have or preparing for IRS Access
    workflow.put("irsStatus", identityIRSStatus);
    workflow.put("irsCertDate", identityIRSCertDate);
    workflow.put("notifyACIIRS",true);
} else {
    // No IRS affiliation
    workflow.put("notifyACIIRS",false);
}

return plan;</Source>
    </Script>
    <Transition to="Email ACI IRS Contacts" when="notifyACIIRS == true;"/>
    <Transition to="Compile Project"/>
  </Step>
  <Step action="call:compileProvisioningProject" name="Compile Project" posX="452" posY="172" resultVariable="project">
    <Arg name="requester" value="string:spadmin"/>
    <Arg name="requireCreateTemplates" value="string:false"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="noApplicationTemplates" value="string:true"/>
    <Arg name="source" value="string:UI"/>
    <Arg name="optimisticProvisioning" value="string:false"/>
    <Arg name="plan" value="ref:plan"/>
    <Description>Compile the provisioning plan into a provisioning project.
If you need to pass in provisioner options like "noFiltering"
or "noRoleDeprovisioning" you must pass them as explicit
arguments to the call.
The evaluation options "requester" and "source" are commonly
set here.
You can also pass things into the Template and Field scripts by
defining Args in this step.</Description>
    <Transition to="Provision"/>
  </Step>
  <Step action="call:provisionProject" icon="Provision" name="Provision" posX="554" posY="173">
    <Arg name="background" value="string:false"/>
    <Arg name="project" value="ref:project"/>
    <Description>Provision the project.</Description>
    <Transition to="Refresh Identity"/>
  </Step>
  <Step action="call:refreshIdentity" icon="Task" name="Refresh Identity" posX="650" posY="173">
    <Arg name="refreshLinks" value="script:return false;"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="provision" value="string:true"/>
    <Arg name="correlateEntitlements" value="string:true"/>
    <Arg name="synchronizeAttributes" value="string:false"/>
    <Description>Update the identity with anything we might have provisioned to applications</Description>
    <Transition to="Refresh"/>
  </Step>
  <Step action="call:refreshIdentity" icon="Task" name="Refresh" posX="745" posY="173">
    <Arg name="refreshLinks" value="script:return false;"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="provision" value="string:true"/>
    <Arg name="correlateEntitlements" value="string:true"/>
    <Arg name="synchronizeAttributes" value="string:false"/>
    <Description>Update the identity with anything we might have provisioned to applications</Description>
    <Transition to="Notify HR and Manager"/>
  </Step>
  <Step icon="Email" name="Notify HR and Manager" posX="844" posY="173">
    <Description>Notify HR and manager of the application that were disabled</Description>
    <Script>
      <Source>/*
    Workflow:  ACI - Fusion Leaver
    Step:  Notify HR and Manager
    
    Date:  November 18, 2016
    Version:  1.2
*/

import java.util.ArrayList; 
import java.util.Iterator; 
import sailpoint.tools.Message;
import sailpoint.object.EmailOptions;
import sailpoint.object.EmailTemplate;
import sailpoint.api.*;
import org.apache.log4j.Logger;

Logger  logger = Logger.getLogger("com.aci.wf.leaver");
logger.debug("ACI - Fusion Leaver(Notify HR and Manager)");

//Send notification
EmailOptions options = new EmailOptions();
EmailTemplate emailTemplate = context.getObjectByName(EmailTemplate.class, "ACI - Leaver Mgr Account");

// Add Vendor Mgmt for contingents only
String sendCc = "mbox-idm-prd@aciworldwide.com,jenny.powers@aciworldwide.com,julie.moritz@aciworldwide.com";

if ( personType.toLowerCase().contains("contingent") ) 
    sendCc = managerEmail +",mbox-vm-contractors@aciworldwide.com";
else
    sendCc = managerEmail;
    
emailTemplate.setTo( hrEmail );
emailTemplate.setCc( sendCc );
emailTemplate.setBcc( "mbox-idm-prd@aciworldwide.com" );
emailTemplate.setSubject( "Terminate Processed - " + lastname + ", " + firstname );

options.setSendImmediate(true);
options.setNoRetry(true);
options.setVariable("name", identityName);
options.setVariable("firstname", firstname);
options.setVariable("lastname", lastname);
options.setVariable("email", employeeEmail);
options.setVariable("manager", managerName);
options.setVariable("employeeTitle", employeeTitle);
options.setVariable("personType", personType);
options.setVariable("department", department);
options.setVariable("location", location);
options.setVariable("country", country);
options.setVariable("termDate", termDate);
options.setVariable("list", applist);
context.sendEmailNotification( emailTemplate, options);

/*
if ( sendLdapNotification!=null &amp;&amp; sendLdapNotification.equals("true") ) {
	//Send ldap notification 
	EmailTemplate ldapEmailTemplate  = context.getObjectByName(EmailTemplate.class, "ACI - LDAP Disable Account");
	Identity workgroup = context.getObjectByName(Identity.class, "IIQ Admins");
	Map ldapMap = new HashMap();
	ldapMap.put("nativeId", nativeId);
	ldapMap.put("appName", appName);
	ldapMap.put("firstname", firstname);
	ldapMap.put("lastname", lastname);
	EmailOptions options = new EmailOptions(ObjectUtil.getEffectiveEmails(this.context, workgroup), ldapMap);
	context.sendEmailNotification( ldapEmailTemplate  , options );
}
*/		</Source>
    </Script>
    <Transition to="Stop"/>
  </Step>
  <Step catches="complete" icon="Stop" name="Stop" posX="946" posY="173">
    <Script>
      <Source>
import java.util.ArrayList; 
import java.util.Iterator; 
import sailpoint.tools.Message;
import org.apache.log4j.Logger;
import sailpoint.object.EmailOptions;
import sailpoint.object.EmailTemplate;
 
Logger  logger = Logger.getLogger("com.aci.wf.joiner");
 ArrayList messages = wfcase.getMessages(); 

if (messages != null) {
   logger.error("Error occurred in leaver workflow..."); 
    //System.out.println("wfcase = " + wfcase.toXml()); 
 
   Iterator iter = messages.iterator();   
    while (iter.hasNext()) {
            Message next = (Message) iter.next();
            logger.error("Message = " + next.toString()); 
      }
EmailOptions options = new EmailOptions();
options.setTo("mbox-idm-prd@aciworldwide.com");
EmailTemplate et = context.getObjectByName(EmailTemplate.class, "ACI - Error");
options.setSendImmediate(true);
options.setNoRetry(true);
options.setVariable("name", identityName);
options.setVariable("list", messages);
context.sendEmailNotification(et, options);

}
      </Source>
    </Script>
  </Step>
  <Step action="call:sendEmail" configForm="Provisioning Notification Step Form" icon="Email" name="Email ACI IRS Contacts" posX="363" posY="64">
    <Arg name="cc" value="mbox-idm-prd@aciworldwide.com"/>
    <Arg name="template" value="ACI - IRS Term Email"/>
    <Arg name="to" value="mbox-aci-irs-comms@aciworldwide.com"/>
    <Description>
      	  Notify the various actors specified on notification scheme.
        </Description>
    <Transition to="Compile Project"/>
  </Step>
</Workflow>
